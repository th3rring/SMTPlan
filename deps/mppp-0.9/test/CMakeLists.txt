# We have some multithreaded tests, so let's activate threading support.
include(YACMAThreadingSetup)
include(YACMACompilerLinkerSettings)

list(APPEND MPPP_CXX_FLAGS_DEBUG ${YACMA_THREADING_CXX_FLAGS})
list(APPEND MPPP_CXX_FLAGS_RELEASE ${YACMA_THREADING_CXX_FLAGS})

function(ADD_MPPP_TESTCASE arg1)
  if(MPPP_TEST_NSPLIT)
    # Increase by one the _MPPP_TEST_NUM variable in the parent scope.
    # NOTE: we do it here (rather than at the end of the function) because we may exit the
    # function earlier in the return() below.
    # NOTE: even though we updated the _MPPP_TEST_NUM variable in the parent scope,
    # the _MPPP_TEST_NUM in the *current* scope still contains the old value.
    math(EXPR __MPPP_TEST_NUM "(${_MPPP_TEST_NUM} + 1) % ${MPPP_TEST_NSPLIT}")
    set(_MPPP_TEST_NUM ${__MPPP_TEST_NUM} PARENT_SCOPE)
  endif()
  if(MPPP_TEST_NSPLIT AND NOT "${MPPP_TEST_SPLIT_NUM}" STREQUAL "${_MPPP_TEST_NUM}")
    return()
  endif()
  add_executable(${arg1} ${arg1}.cpp)
  target_link_libraries(${arg1} mp++ Threads::Threads)
  target_compile_options(${arg1} PRIVATE "$<$<CONFIG:DEBUG>:${MPPP_CXX_FLAGS_DEBUG}>" "$<$<CONFIG:RELEASE>:${MPPP_CXX_FLAGS_RELEASE}>")
  # NOTE: for clang-cl, cmake tries to set -std=c++11 here, which makes
  # it error out. Disable it as MSVC 2015 is implicitly C++14 anyway.
  if(NOT (YACMA_COMPILER_IS_MSVC AND YACMA_COMPILER_IS_CLANGXX))
    # Let's setup the target C++ standard, but only if the user did not provide it manually.
    if(NOT CMAKE_CXX_STANDARD)
      if(MPPP_COMPILER_SUPPORTS_CONCEPTS)
        # NOTE: the idea here is that we want to use C++14 if the compilers supports
        # concepts (as variable concepts are essentially template variables).
        set_property(TARGET ${arg1} PROPERTY CXX_STANDARD 14)
      else()
        set_property(TARGET ${arg1} PROPERTY CXX_STANDARD 11)
      endif()
    endif()
    set_property(TARGET ${arg1} PROPERTY CXX_STANDARD_REQUIRED YES)
    set_property(TARGET ${arg1} PROPERTY CXX_EXTENSIONS NO)
  endif()
  add_test(${arg1} ${arg1})
endfunction()

ADD_MPPP_TESTCASE(concepts)
ADD_MPPP_TESTCASE(integer_abs)
ADD_MPPP_TESTCASE(integer_addsub_ui)
ADD_MPPP_TESTCASE(integer_arith)
ADD_MPPP_TESTCASE(integer_arith_ops_01)
ADD_MPPP_TESTCASE(integer_arith_ops_02)
ADD_MPPP_TESTCASE(integer_arith_ops_03)
if(NOT MINGW)
  # At the moment this test results in a linking error in conjunction
  # with catch. Needs to be investigated.
  # NOTE: this might be related to the binary size and/or debug info, we can try splitting
  # some tests up more or compile without debug info on the CI.
  ADD_MPPP_TESTCASE(integer_basic_01)
  ADD_MPPP_TESTCASE(integer_basic_02)
  ADD_MPPP_TESTCASE(integer_basic_03)
endif()
ADD_MPPP_TESTCASE(integer_bin)
ADD_MPPP_TESTCASE(integer_bitwise)
ADD_MPPP_TESTCASE(integer_caches)
ADD_MPPP_TESTCASE(integer_divexact)
ADD_MPPP_TESTCASE(integer_divexact_gcd)
ADD_MPPP_TESTCASE(integer_even_odd)
ADD_MPPP_TESTCASE(integer_fac)
ADD_MPPP_TESTCASE(integer_gcd)
ADD_MPPP_TESTCASE(integer_get_mpz_t)
ADD_MPPP_TESTCASE(integer_hash)
ADD_MPPP_TESTCASE(integer_is_zero_one)
ADD_MPPP_TESTCASE(integer_limb_size_nbits)
ADD_MPPP_TESTCASE(integer_neg)
ADD_MPPP_TESTCASE(integer_nextprime)
ADD_MPPP_TESTCASE(integer_pow)
ADD_MPPP_TESTCASE(integer_probab_prime_p)
ADD_MPPP_TESTCASE(integer_rel)
ADD_MPPP_TESTCASE(integer_set_zero_one)
ADD_MPPP_TESTCASE(integer_sqrt)
ADD_MPPP_TESTCASE(integer_tdiv_q)
ADD_MPPP_TESTCASE(integer_view)

ADD_MPPP_TESTCASE(rational_abs)
ADD_MPPP_TESTCASE(rational_arith)
ADD_MPPP_TESTCASE(rational_arith_ops_01)
ADD_MPPP_TESTCASE(rational_arith_ops_02)
ADD_MPPP_TESTCASE(rational_arith_ops_03)
if(NOT MINGW)
    # NOTE: same as above.
    ADD_MPPP_TESTCASE(rational_basic)
endif()
ADD_MPPP_TESTCASE(rational_binomial)
ADD_MPPP_TESTCASE(rational_hash)
ADD_MPPP_TESTCASE(rational_inv)
ADD_MPPP_TESTCASE(rational_is_zero_one)
ADD_MPPP_TESTCASE(rational_neg)
ADD_MPPP_TESTCASE(rational_pow)
ADD_MPPP_TESTCASE(rational_rel)

if(MPPP_WITH_QUADMATH)
  ADD_MPPP_TESTCASE(real128_arith)
  ADD_MPPP_TESTCASE(real128_basic)
  ADD_MPPP_TESTCASE(real128_comparisons)
  ADD_MPPP_TESTCASE(real128_constants)
  ADD_MPPP_TESTCASE(real128_ieee)
  ADD_MPPP_TESTCASE(real128_io)
  ADD_MPPP_TESTCASE(real128_logexp)
  ADD_MPPP_TESTCASE(real128_naninffinite)
  ADD_MPPP_TESTCASE(real128_operators)
  ADD_MPPP_TESTCASE(real128_pow)
  ADD_MPPP_TESTCASE(real128_roots)
  ADD_MPPP_TESTCASE(real128_signbit)
  ADD_MPPP_TESTCASE(real128_trig)
endif()

if(MPPP_WITH_MPFR)
  ADD_MPPP_TESTCASE(real_arith)
  ADD_MPPP_TESTCASE(real_basic)
  ADD_MPPP_TESTCASE(real_cmp)
  ADD_MPPP_TESTCASE(real_constants)
  ADD_MPPP_TESTCASE(real_gamma)
  ADD_MPPP_TESTCASE(real_io)
  ADD_MPPP_TESTCASE(real_logexp)
  ADD_MPPP_TESTCASE(real_neg_abs)
  ADD_MPPP_TESTCASE(real_operators)
  ADD_MPPP_TESTCASE(real_pow)
  ADD_MPPP_TESTCASE(real_roots)
  ADD_MPPP_TESTCASE(real_get_set_z_2exp)
  ADD_MPPP_TESTCASE(real_trig)
  ADD_MPPP_TESTCASE(real_intrem)
endif()

if(MPPP_TEST_PYBIND11)
  add_subdirectory(pybind11)
endif()

ADD_MPPP_TESTCASE(demangle)
ADD_MPPP_TESTCASE(utils)
ADD_MPPP_TESTCASE(type_traits)
